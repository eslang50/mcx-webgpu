(()=>{"use strict";const e="@group(0) @binding(0) var screen_sampler : sampler;\r\n@group(0) @binding(1) var color_buffer : texture_2d<f32>;\r\n\r\nstruct VertexOutput {\r\n    @builtin(position) Position : vec4<f32>,\r\n    @location(0) TexCoord : vec2<f32>,\r\n}\r\n\r\n@vertex\r\nfn vert_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\r\n\r\n    var positions = array<vec2<f32>, 6>(\r\n        vec2<f32>( 1.0,  1.0),\r\n        vec2<f32>( 1.0, -1.0),\r\n        vec2<f32>(-1.0, -1.0),\r\n        vec2<f32>( 1.0,  1.0),\r\n        vec2<f32>(-1.0, -1.0),\r\n        vec2<f32>(-1.0,  1.0)\r\n    );\r\n\r\n    var texCoords = array<vec2<f32>, 6>(\r\n        vec2<f32>(1.0, 0.0),\r\n        vec2<f32>(1.0, 1.0),\r\n        vec2<f32>(0.0, 1.0),\r\n        vec2<f32>(1.0, 0.0),\r\n        vec2<f32>(0.0, 1.0),\r\n        vec2<f32>(0.0, 0.0)\r\n    );\r\n\r\n    var output : VertexOutput;\r\n    output.Position = vec4<f32>(positions[VertexIndex], 0.0, 1.0);\r\n    output.TexCoord = texCoords[VertexIndex];\r\n    return output;\r\n}\r\n\r\n@fragment\r\nfn frag_main(@location(0) TexCoord : vec2<f32>) -> @location(0) vec4<f32> {\r\n  return textureSample(color_buffer, screen_sampler, TexCoord);\r\n}";var r=function(e,r,n,i){return new(n||(n=Promise))((function(t,o){function a(e){try{s(i.next(e))}catch(e){o(e)}}function c(e){try{s(i.throw(e))}catch(e){o(e)}}function s(e){var r;e.done?t(e.value):(r=e.value,r instanceof n?r:new n((function(e){e(r)}))).then(a,c)}s((i=i.apply(e,r||[])).next())}))};const n=document.getElementById("gfx-main"),i=new class{constructor(e){this.render=()=>{const e=this.device.createCommandEncoder(),r=e.beginComputePass();r.setPipeline(this.ray_tracing_pipeline),r.setBindGroup(0,this.ray_tracing_bind_group),r.dispatchWorkgroups(Math.floor((this.canvas.width+7)/8),Math.floor((this.canvas.height+7)/8),1),r.end();const n=this.context.getCurrentTexture().createView(),i=e.beginRenderPass({colorAttachments:[{view:n,clearValue:{r:.5,g:0,b:.25,a:1},loadOp:"clear",storeOp:"store"}]});i.setPipeline(this.screen_pipeline),i.setBindGroup(0,this.screen_bind_group),i.draw(6,1,0,0),i.end(),this.device.queue.submit([e.finish()]),requestAnimationFrame(this.render)},this.canvas=e}Initialize(){return r(this,void 0,void 0,(function*(){yield this.setupDevice(),yield this.createAssets(),yield this.makePipeline(),this.render()}))}setupDevice(){return r(this,void 0,void 0,(function*(){var e,r;this.adapter=yield null===(e=navigator.gpu)||void 0===e?void 0:e.requestAdapter(),this.device=yield null===(r=this.adapter)||void 0===r?void 0:r.requestDevice(),this.context=this.canvas.getContext("webgpu"),this.format="bgra8unorm",this.context.configure({device:this.device,format:this.format,alphaMode:"opaque"})}))}makePipeline(){return r(this,void 0,void 0,(function*(){const r=this.device.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,storageTexture:{access:"write-only",format:"rgba8unorm",viewDimension:"2d"}}]});this.ray_tracing_bind_group=this.device.createBindGroup({layout:r,entries:[{binding:0,resource:this.color_buffer_view}]});const n=this.device.createPipelineLayout({bindGroupLayouts:[r]});this.ray_tracing_pipeline=this.device.createComputePipeline({layout:n,compute:{module:this.device.createShaderModule({code:"@group(0) @binding(0) var color_buffer: texture_storage_2d<rgba8unorm, write>;\r\n\r\nstruct Sphere {\r\n    center: vec3<f32>,\r\n    radius: f32,\r\n}\r\n\r\nstruct Ray {\r\n    direction: vec3<f32>,\r\n    origin: vec3<f32>,\r\n}\r\n\r\nstruct PencilBeam {\r\n    direction: vec3<f32>,\r\n    origin: vec3<f32>,\r\n    spread_angle: f32, // Angle of spread for the pencil beam\r\n}\r\n\r\n@compute @workgroup_size(8,8,1)\r\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\r\n\r\n    let screen_size: vec2<i32> = vec2<i32>(textureDimensions(color_buffer));\r\n    let screen_pos : vec2<i32> = vec2<i32>(i32(GlobalInvocationID.x), i32(GlobalInvocationID.y));\r\n\r\n    if (screen_pos.x >= screen_size.x || screen_pos.y >= screen_size.y) {\r\n        return;\r\n    }\r\n\r\n    let horizontal_coefficient: f32 = (f32(screen_pos.x) - f32(screen_size.x) / 2) / f32(screen_size.x);\r\n    let vertical_coefficient: f32 = (f32(screen_pos.y) - f32(screen_size.y) / 2) / f32(screen_size.x);\r\n    let forwards: vec3<f32> = vec3<f32>(1.0, 0.0, 0.0);\r\n    let right: vec3<f32> = vec3<f32>(0.0, -1.0, 0.0);\r\n    let up: vec3<f32> = vec3<f32>(0.0, 0.0, 1.0);\r\n\r\n    var mySphere: Sphere;\r\n    mySphere.center = vec3<f32>(3.0, 0.0, 0.0);\r\n    mySphere.radius = 1.0;\r\n\r\n    // Define pencil beam parameters\r\n    var pencil_beam: PencilBeam;\r\n    pencil_beam.origin = vec3<f32>(0.0, 0.0, 0.0);\r\n    pencil_beam.direction = normalize(vec3<f32>(1.0, 0.0, 0.0)); // Example direction\r\n    pencil_beam.spread_angle = 0.1; // Example spread angle\r\n\r\n    // Generate ray direction based on pencil beam parameters\r\n    var myRay: Ray;\r\n    myRay.origin = pencil_beam.origin;\r\n    myRay.direction = normalize(pencil_beam.direction + horizontal_coefficient * right + vertical_coefficient * up);\r\n\r\n    // var myRay: Ray;\r\n    // myRay.direction = normalize(forwards + horizontal_coefficient * right + vertical_coefficient * up);\r\n    // myRay.origin = vec3<f32>(0.0, 0.0, 0.0);\r\n\r\n    var pixel_color : vec3<f32> = vec3<f32>(0.5, 0.0, 0.25);\r\n\r\n    if (hit(myRay, [mySphere])) {\r\n        pixel_color = vec3<f32>(1.0, 1.0, 0);\r\n    }\r\n\r\n    // add loop for hit function to traverse thru voxels\r\n    // detect whether cross voxel boundary based on scattering lens\r\n\r\n    textureStore(color_buffer, screen_pos, vec4<f32>(pixel_color, 1.0));\r\n}\r\n\r\nfn hit(ray: Ray, spheres: array<Sphere>) -> bool {\r\n    for (var i = 0; i < spheres.length; i++) {\r\n        let a: f32 = dot(ray.direction, ray.direction);\r\n        let b: f32 = 2.0 * dot(ray.direction, ray.origin - sphere.center);\r\n        let c: f32 = dot(ray.origin - sphere.center, ray.origin - sphere.center) - sphere.radius * sphere.radius;\r\n        let discriminant: f32 = b * b - 4.0 * a * c;\r\n\r\n        if discriminant > 0 {\r\n            return true; // Intersection found\r\n        }\r\n    }\r\n    return false; // No intersection found\r\n}\r\n"}),entryPoint:"main"}});const i=this.device.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:1,visibility:GPUShaderStage.FRAGMENT,texture:{}}]});this.screen_bind_group=this.device.createBindGroup({layout:i,entries:[{binding:0,resource:this.sampler},{binding:1,resource:this.color_buffer_view}]});const t=this.device.createPipelineLayout({bindGroupLayouts:[i]});this.screen_pipeline=this.device.createRenderPipeline({layout:t,vertex:{module:this.device.createShaderModule({code:e}),entryPoint:"vert_main"},fragment:{module:this.device.createShaderModule({code:e}),entryPoint:"frag_main",targets:[{format:"bgra8unorm"}]},primitive:{topology:"triangle-list"}})}))}createAssets(){return r(this,void 0,void 0,(function*(){this.color_buffer=this.device.createTexture({size:{width:this.canvas.width,height:this.canvas.height},format:"rgba8unorm",usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.TEXTURE_BINDING}),this.color_buffer_view=this.color_buffer.createView(),this.sampler=this.device.createSampler({addressModeU:"repeat",addressModeV:"repeat",magFilter:"linear",minFilter:"nearest",mipmapFilter:"nearest",maxAnisotropy:1})}))}}(n);i.Initialize()})();